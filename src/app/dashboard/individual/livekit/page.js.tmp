

// 'use client';

// import React, { useState, useEffect, useRef } from 'react';
// import { Room, RemoteTrack, RoomEvent, ConnectionState, createLocalAudioTrack } from 'livekit-client';

// import { motion } from 'framer-motion';
// import { PlayIcon, PauseIcon } from '@heroicons/react/24/solid';

// const RecordButton = ({ isRecording, startVoiceAssistant, stopVoiceAssistant }) => {
//   return (
//     <motion.button
//       onClick={isRecording ? stopVoiceAssistant : startVoiceAssistant}
//       className="relative flex items-center justify-center text-white shadow-2xl px-10 py-10 sm:px-12 sm:py-12 lg:px-14 lg:py-14 transition-all duration-300"
//       style={{
//         background: isRecording
//           ? 'linear-gradient(135deg, #a855f7, #ef4444, #ec4899)'
//           : 'linear-gradient(135deg, #facc15, #f97316, #ec4899, #f43f5e)',
//         backgroundSize: '300% 300%',
//         animation: 'gradientShift 1.5s ease infinite', // faster gradient sweep
//       }}
//       animate={{
//         borderRadius: [
//           '40% 60% 60% 40% / 50% 40% 60% 50%',
//           '60% 40% 40% 60% / 40% 60% 40% 60%',
//           '50% 50% 70% 30% / 30% 70% 30% 70%',
//           '70% 30% 30% 70% / 60% 40% 60% 40%',
//           '40% 60% 60% 40% / 50% 40% 60% 50%',
//         ],
//         scale: [1, 1.08, 0.92, 1.06, 1], // bouncier
//         rotate: [0, 3, -3, 2, 0], // faster wobble
//       }}
//       transition={{
//         duration: 2.5, // faster morph cycle
//         repeat: Infinity,
//         ease: 'easeInOut',
//       }}
//       whileHover={{ scale: 1.15 }}
//       whileTap={{ scale: 0.9 }}
//     >
//       {isRecording ? (
//         <PauseIcon className="w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 z-10" />
//       ) : (
//         <PlayIcon className="w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 z-10" />
//       )}

//       {/* Ripple waves — only active during recording */}
//       {isRecording && (
//         <>
//           <div className="absolute inset-0 rounded-[inherit] border border-white opacity-30 animate-ping" />
//           <div
//             className="absolute inset-0 rounded-[inherit] border border-white opacity-20 animate-ping"
//             style={{ animationDelay: '0.25s' }}
//           />
//         </>
//       )}
//     </motion.button>
//   );
// };


// const AmebaButton = ({ isRecording, startVoiceAssistant, stopVoiceAssistant }) => {
//   return (
//  <motion.button
//   onClick={isRecording ? stopVoiceAssistant : startVoiceAssistant}
//   className="relative flex items-center justify-center text-white shadow-2xl px-12 py-12 lg:px-14 lg:py-14 transition-all"
//   style={{
//     background: isRecording
//       ? 'linear-gradient(135deg, #a855f7, #ef4444, #ec4899, #397bdf, #06b6d4, #f59e0b)'
//       : 'linear-gradient(135deg, #a855f7, #ef4444, #ec4899, #397bdf, #06b6d4, #f59e0b)',
//     backgroundSize: '500% 500%',
//     animation: 'gradientShift 3s ease infinite',
//   }}
//   animate={{
//     borderRadius: [
//       '42% 58% 60% 40% / 55% 42% 58% 45%',
//       '60% 40% 55% 45% / 40% 65% 35% 60%',
//       '50% 50% 70% 30% / 35% 65% 30% 70%',
//       '68% 32% 38% 62% / 55% 45% 35% 65%',
//       '58% 42% 62% 38% / 48% 52% 40% 60%',
//       '45% 55% 65% 35% / 60% 40% 70% 30%',
//     ],
//     scale: [1, 1.1, 0.92, 1.06, 0.98, 1],
//     rotate: [0, 3, -4, 2, -1, 0],
//     skewX: [0, 3, -6, 2, -2, 0],
//     skewY: [0, -2, 6, -3, 2, 0],
//   }}
//   transition={{
//     duration: 1.8,
//     repeat: Infinity,
//     ease: 'easeInOut',
//   }}
//   whileHover={{ scale: 1.2 }}
//   whileTap={{ scale: 0.9 }}
// >
//   {isRecording ? (
//     <PauseIcon className="w-12 h-12 lg:w-14 lg:h-14 z-10" />
//   ) : (
//     <PlayIcon className="w-12 h-12 lg:w-14 lg:h-14 z-10" />
//   )}
// </motion.button>
//   );
// };

// // Voice Assistant with simplified, reliable approach
// const ImprovedVoiceAssistant = () => {
//   const [isRecording, setIsRecording] = useState(false);
//   const [sessionData, setSessionData] = useState(null);
//   const [currentConversation, setCurrentConversation] = useState(null);
//   const [isListening, setIsListening] = useState(false);
//   const [isBotSpeaking, setIsBotSpeaking] = useState(false);
//   const [userTyping, setUserTyping] = useState({ text: '', isActive: false });
//   const [botTyping, setBotTyping] = useState({ text: '', isActive: false });
//   const [debugStatus, setDebugStatus] = useState('Ready');
//   const [turnCount, setTurnCount] = useState(0);
//   const [isProcessing, setIsProcessing] = useState(false);
  
//   const sessionDataRef = useRef(null);
//   const speechRecognitionRef = useRef(null);
//   const botSpeechRef = useRef(null);
//   const isProcessingRef = useRef(false);
//   const userTypingIntervalRef = useRef(null);
//   const botTypingIntervalRef = useRef(null);
//   const currentUserTextRef = useRef('');
//   const currentBotTextRef = useRef('');
//   const preloadedVoiceRef = useRef(null);
//   const restartTimeoutRef = useRef(null);

//   // Preload voice for faster speech synthesis
//   useEffect(() => {
//     if ('speechSynthesis' in window) {
//       const loadVoices = () => {
//         const voices = window.speechSynthesis.getVoices();
//         const preferredVoices = voices.filter(voice => 
//           voice.lang.startsWith('en') && 
//           (voice.name.includes('Neural') || voice.name.includes('Premium') || voice.name.includes('Enhanced'))
//         );
        
//         if (preferredVoices.length > 0) {
//           preloadedVoiceRef.current = preferredVoices[0];
//         } else if (voices.length > 0) {
//           const englishVoices = voices.filter(voice => voice.lang.startsWith('en'));
//           preloadedVoiceRef.current = englishVoices[0] || voices[0];
//         }
//       };

//       // Load voices immediately if available
//       if (window.speechSynthesis.getVoices().length > 0) {
//         loadVoices();
//       } else {
//         // Wait for voices to load
//         window.speechSynthesis.onvoiceschanged = loadVoices;
//       }
//     }
//   }, []);

//   // Session configuration
//   const sessionConfig = {
//     conversation_id: 'voice_conversation_' + Date.now(),
//     individual_id: 'individual_f068689a7d96',
//     user_profile_id: 'user_profile_610f7db5658e',
//     detected_agent: 'loneliness',
//     agent_instance_id: 'loneliness_658',
//     call_log_id: 'call_log_voice_' + Date.now(),
//     participant_name: 'voice_user_' + Math.random().toString(36).substr(2, 9),
//     voice_settings: {
//       vad_enabled: true,
//       echo_cancellation: true,
//       noise_suppression: true,
//       auto_gain_control: true,
//       sample_rate: 16000,
//       interruption_enabled: true
//     }
//   };

//   // Simplified typing effect functions
//   const startUserTyping = (text) => {
//     if (userTypingIntervalRef.current) {
//       clearInterval(userTypingIntervalRef.current);
//     }
    
//     currentUserTextRef.current = text;
//     setUserTyping({ text: '', isActive: true });
    
//     let index = 0;
//     const typingSpeed = 40;
    
//     userTypingIntervalRef.current = setInterval(() => {
//       if (index <= text.length) {
//         setUserTyping({ text: text.slice(0, index), isActive: true });
//         index++;
//       } else {
//         clearInterval(userTypingIntervalRef.current);
//         setTimeout(() => {
//           setUserTyping(prev => ({ ...prev, isActive: false }));
//         }, 500);
//       }
//     }, typingSpeed);
//   };

//   const startBotTyping = (text) => {
//     if (botTypingIntervalRef.current) {
//       clearInterval(botTypingIntervalRef.current);
//     }
    
//     currentBotTextRef.current = text;
//     setBotTyping({ text: '', isActive: true });
    
//     let index = 0;
//     const typingSpeed = 20;
    
//     botTypingIntervalRef.current = setInterval(() => {
//       if (index <= text.length) {
//         setBotTyping({ text: text.slice(0, index), isActive: true });
//         index++;
//       } else {
//         clearInterval(botTypingIntervalRef.current);
//       }
//     }, typingSpeed);
//   };

//   const stopBotTyping = () => {
//     if (botTypingIntervalRef.current) {
//       clearInterval(botTypingIntervalRef.current);
//     }
//     setBotTyping(prev => ({ ...prev, isActive: false }));
//   };

//   const stopAllTyping = () => {
//     if (userTypingIntervalRef.current) {
//       clearInterval(userTypingIntervalRef.current);
//     }
//     if (botTypingIntervalRef.current) {
//       clearInterval(botTypingIntervalRef.current);
//     }
//     setUserTyping({ text: '', isActive: false });
//     setBotTyping({ text: '', isActive: false });
//   };

//   // Simplified Speech Recognition Setup - No VAD, just pure speech recognition
//   useEffect(() => {
//     if (typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
//       const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
//       const recognition = new SpeechRecognition();
      
//       // Simple, reliable settings
//       recognition.continuous = true;
//       recognition.interimResults = true;
//       recognition.lang = 'en-US';
//       recognition.maxAlternatives = 1;
      
//       recognition.onstart = () => {
//         console.log('Speech recognition started');
//         setIsListening(true);
//         setDebugStatus('Listening...');
//       };

//       recognition.onresult = async (event) => {
//         let interimTranscript = '';
//         let finalText = '';
        
//         for (let i = event.resultIndex; i < event.results.length; i++) {
//           const transcript = event.results[i][0].transcript;
          
//           if (event.results[i].isFinal) {
//             finalText += transcript;
//           } else {
//             interimTranscript += transcript;
//           }
//         }
        
//         // Show interim results
//         if (interimTranscript.trim() && !isProcessingRef.current) {
//           setUserTyping({ text: interimTranscript.trim(), isActive: true });
//         }
        
//         // Process final text
//         if (finalText.trim() && !isProcessingRef.current) {
//           const cleanText = finalText.trim();
//           if (cleanText.length > 2) {
//             console.log('Processing speech:', cleanText);
//             setTurnCount(prev => prev + 1);
            
//             // Start user typing animation
//             startUserTyping(cleanText);
            
//             // Process the input
//             await processVoiceInput(cleanText);
//           }
//         }
//       };
      
//       recognition.onerror = (event) => {
//         console.error('Speech recognition error:', event.error);
//         setIsListening(false);
        
//         // Handle errors gracefully
//         if (event.error === 'no-speech') {
//           setDebugStatus('No speech detected...');
//           // Auto-restart after a short delay
//           setTimeout(() => {
//             if (isRecording && !isProcessingRef.current && !isBotSpeaking) {
//               startSpeechRecognition();
//             }
//           }, 1000);
//         } else if (event.error === 'network') {
//           setDebugStatus('Network error, retrying...');
//           setTimeout(() => {
//             if (isRecording && !isProcessingRef.current && !isBotSpeaking) {
//               startSpeechRecognition();
//             }
//           }, 2000);
//         }
//       };
      
//       recognition.onend = () => {
//         console.log('Speech recognition ended');
//         setIsListening(false);
        
//         // Only auto-restart if we're still recording and not processing
//         // Don't restart if the bot is about to speak or is speaking
//         if (isRecording && !isProcessingRef.current && !isBotSpeaking) {
//           setTimeout(() => {
//             // Double-check conditions before restarting
//             if (isRecording && !isProcessingRef.current && !isBotSpeaking) {
//               console.log('Auto-restarting speech recognition');
//               startSpeechRecognition();
//             }
//           }, 500);
//         }
//       };
      
//       speechRecognitionRef.current = recognition;
//     }
//   }, [isRecording, isProcessingRef, isBotSpeaking]);

//   const startSpeechRecognition = () => {
//     if (speechRecognitionRef.current && !isProcessingRef.current && !isBotSpeaking) {
//       try {
//         speechRecognitionRef.current.start();
//         console.log('Speech recognition started');
//       } catch (error) {
//         console.error('Error starting speech recognition:', error);
//         if (error.name !== 'InvalidStateError') {
//           setDebugStatus('Error starting recognition');
//         }
//       }
//     }
//   };

//   const stopSpeechRecognition = () => {
//     if (speechRecognitionRef.current && isListening) {
//       try {
//         speechRecognitionRef.current.stop();
//         console.log('Speech recognition stopped');
//       } catch (error) {
//         console.error('Error stopping speech recognition:', error);
//       }
//     }
//   };

//   const processVoiceInput = async (text) => {
//     try {
//       console.log('Processing voice input:', text);
//       isProcessingRef.current = true;
//       setIsProcessing(true);
//       setDebugStatus('Processing...');
      
//       // Stop speech recognition while processing
//       stopSpeechRecognition();
      
//       const currentSessionData = sessionDataRef.current || sessionData;
      
//       if (!currentSessionData) {
//         console.error('No session data available');
//         return;
//       }

//       const payload = {
//         session_id: currentSessionData.session_id,
//         text: text,
//         conversation_id: currentSessionData.conversation_id,
//         individual_id: currentSessionData.individual_id || 'individual_f068689a7d96',
//         user_profile_id: currentSessionData.user_profile_id || 'user_profile_610f7db5658e'
//       };

//       console.log('Sending request to voice API');
//       const response = await fetch('/api/v1/voice/voice-message', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify(payload)
//       });

//       const result = await response.json();
//       console.log('Voice API response:', result);

//       if (result.status === 'success') {
//         const responseText = result.assistant_response;
        
//         // Update current conversation
//         setCurrentConversation({ user: text, bot: responseText, timestamp: Date.now() });
        
//         // Start bot typing and speaking
//         startBotTyping(responseText);
//         await speakText(responseText);
        
//         console.log('Voice processing completed');
//       } else {
//         console.error('Voice API error:', result);
//       }
//     } catch (error) {
//       console.error('Error processing voice input:', error);
//     } finally {
//       isProcessingRef.current = false;
//       setIsProcessing(false);
//       console.log('Processing flag cleared');
//     }
//   };

//   const speakText = async (text) => {
//     return new Promise((resolve) => {
//       if ('speechSynthesis' in window) {
//         window.speechSynthesis.cancel();
        
//         const utterance = new SpeechSynthesisUtterance(text);
//         utterance.rate = 1.1; // Slightly faster speech for more responsive feel
//         utterance.pitch = 1.0;
//         utterance.volume = 0.9;
        
//         // Use preloaded voice for faster response
//         if (preloadedVoiceRef.current) {
//           utterance.voice = preloadedVoiceRef.current;
//         } else {
//           // Fallback to selecting voice
//           const voices = window.speechSynthesis.getVoices();
//           const preferredVoices = voices.filter(voice => 
//             voice.lang.startsWith('en') && 
//             (voice.name.includes('Neural') || voice.name.includes('Premium') || voice.name.includes('Enhanced'))
//           );
          
//           if (preferredVoices.length > 0) {
//             utterance.voice = preferredVoices[0];
//           } else if (voices.length > 0) {
//             const englishVoices = voices.filter(voice => voice.lang.startsWith('en'));
//             utterance.voice = englishVoices[0] || voices[0];
//           }
//         }
        
//         utterance.onstart = () => {
//           setIsBotSpeaking(true);
//           setDebugStatus('Bot speaking...');
//         };
        
//         utterance.onend = () => {
//           console.log('Speech synthesis ended');
//           setIsBotSpeaking(false);
//           setDebugStatus('Speech ended, preparing to listen');
//           // Stop typing when speech ends
//           stopBotTyping();
          
//           // Resume listening after speaking with proper delay
//           if (isRecording && !isProcessingRef.current) {
//             console.log('Bot finished speaking, will restart speech recognition in 1 second');
//             setTimeout(() => {
//               console.log('Attempting to restart speech recognition after bot speech');
//               if (isRecording && !isProcessingRef.current && !isBotSpeaking) {
//                 setDebugStatus('Ready to listen');
//                 console.log('Restarting speech recognition for next turn');
//                 startSpeechRecognition();
//               } else {
//                 console.log('Cannot restart speech recognition:', {
//                   isRecording,
//                   isProcessing: isProcessingRef.current,
//                   isBotSpeaking
//                 });
//               }
//             }, 1000); // Increased delay to ensure clean restart
//           }
          
//           resolve();
//         };
        
//         utterance.onerror = (event) => {
//           setIsBotSpeaking(false);
//           stopBotTyping();
//           resolve();
//         };
        
//         botSpeechRef.current = utterance;
//         window.speechSynthesis.speak(utterance);
//       } else {
//         resolve();
//       }
//     });
//   };

//   const createSession = async () => {
//     try {
//       const response = await fetch('/api/v1/voice/voice-sessions', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify(sessionConfig)
//       });

//       if (!response.ok) {
//         throw new Error(`Failed to create session: ${response.status}`);
//       }

//       const data = await response.json();
//       setSessionData(data);
//       sessionDataRef.current = data;
//       return data;
//     } catch (error) {
//       console.error('Error creating session:', error);
//       throw error;
//     }
//   };

//   const startVoiceAssistant = async () => {
//     try {
//       console.log('Starting voice assistant');
      
//       // Reset all states
//       setDebugStatus('Initializing...');
//       setTurnCount(0);
//       setCurrentConversation(null);
//       stopAllTyping();
      
//       // Clear processing flags
//       isProcessingRef.current = false;
      
//       const session = await createSession();
//       setDebugStatus('Ready to listen');
      
//       setIsRecording(true);
      
//       // Start listening immediately - no VAD complexity
//       setTimeout(() => {
//         startSpeechRecognition();
//       }, 500);
      
//       console.log('Voice assistant started successfully');
      
//     } catch (error) {
//       console.error('Error starting voice assistant:', error);
//       setDebugStatus('Error: ' + error.message);
//     }
//   };

//   const stopVoiceAssistant = () => {
//     console.log('Stopping voice assistant');
//     setIsRecording(false);
    
//     // Clear processing flags
//     isProcessingRef.current = false;
    
//     // Stop all audio processes
//     stopSpeechRecognition();
//     stopAllTyping();
    
//     // Cancel speech synthesis
//     if (window.speechSynthesis) {
//       window.speechSynthesis.cancel();
//     }
//     setIsBotSpeaking(false);
    
//     // Clear current conversation when stopping
//     setCurrentConversation(null);
//     setDebugStatus('Ready');
    
//     console.log('Voice assistant stopped');
//   };

//   // Cleanup on unmount
//   useEffect(() => {
//     return () => {
//       stopVoiceAssistant();
//     };
//   }, []);

//   // Play/Pause Icon Components
//   const PlayIcon = () => (
//     <svg width="28" height="28" viewBox="0 0 24 24" fill="currentColor" className="ml-1">
//       <path d="M8 5v14l11-7z"/>
//     </svg>
//   );

//   const PauseIcon = () => (
//     <svg width="28" height="28" viewBox="0 0 24 24" fill="currentColor">
//       <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
//     </svg>
//   );

//   // Animated waveform visualizer
//   const WaveformVisualizer = ({ isActive }) => {
//     const bars = Array.from({ length: 30 }, (_, i) => i);
//     return (
//       <div className="flex items-center justify-center space-x-1 h-8 w-full max-w-xs mx-auto">
//         {bars.map((bar) => (
//           <div
//             key={bar}
//             className="bg-gradient-to-t from-blue-400 via-purple-400 to-pink-400 rounded-full transition-all duration-200 ease-out"
//             style={{ 
//               width: '2px',
//               height: isActive 
//                 ? `${Math.random() * 20 + 4}px`
//                 : '3px',
//               opacity: isActive ? 0.8 : 0.3,
//               animationDelay: `${bar * 30}ms`
//             }}
//           />
//         ))}
//       </div>
//     );
//   };

//   const ConversationDisplay = () => {
//   // Show typing effects first, then current conversation
//   if (userTyping.isActive || botTyping.isActive) {
//     return (
//       <div className="space-y-6">
//         {userTyping.isActive && (
//           <div className="text-center">
//             <div className="inline-block bg-[rgb(31,77,143)]/10 px-6 py-4 rounded-2xl backdrop-blur-sm">
//               <div className="text-[rgb(31,77,143)] text-lg font-medium">
//                 {userTyping.text}
//                 <span className="inline-block w-0.5 h-5 bg-[rgb(31,77,143)] ml-1 animate-pulse" />
//               </div>
//             </div>
//           </div>
//         )}
//         {botTyping.isActive && (
//           <div className="text-center">
//             <div className="inline-block bg-purple-800/10 px-6 py-4 rounded-2xl backdrop-blur-sm">
//               <div className="text-purple-800 text-lg font-medium">
//                 {botTyping.text}
//                 <span className="inline-block w-0.5 h-5 bg-purple-600 ml-1 animate-pulse" />
//               </div>
//             </div>
//           </div>
//         )}
//       </div>
//     );
//   }

//   // Show last conversation when not actively typing
//   if (currentConversation && !userTyping.isActive && !botTyping.isActive) {
//     return (
//       <div className="space-y-6 opacity-80">
//         <div className="text-center">
//           <div className="inline-block bg-[rgb(31,77,143)]/5 px-6 py-4 rounded-2xl backdrop-blur-sm">
//             <div className="text-[rgb(31,77,143)] text-lg">
//               {currentConversation.user}
//             </div>
//           </div>
//         </div>
//         <div className="text-center">
//           <div className="inline-block bg-purple-800/5 px-6 py-4 rounded-2xl backdrop-blur-sm">
//             <div className="text-purple-800 text-lg">
//               {currentConversation.bot}
//             </div>
//           </div>
//         </div>
//       </div>
//     );
//   }

//   // Default empty state
//   return (
//     <div className="text-center text-gray-600 py-8">
//       <div className="text-6xl mb-4">🎙️</div>
//       <div className="text-xl font-light mb-2">Ready to chat</div>
//       <div className="text-gray-500">
//         Press play to start your voice conversation
//       </div>
//     </div>
//   );
// };

//   return (
//    <div className="min-h-screen bg-[#f8f7f1] flex flex-col items-center justify-center p-4 sm:p-6">

//       <div className="w-full max-w-2xl mx-auto">
        
//         {/* Main Control Button - Always Centered */}
//         <div className="flex flex-col items-center mb-8">
//           {/* <button
//             onClick={isRecording ? stopVoiceAssistant : startVoiceAssistant}
//             className={`w-20 h-20 sm:w-24 sm:h-24 lg:w-28 lg:h-28 rounded-full flex items-center justify-center text-white transition-all duration-500 transform hover:scale-105 active:scale-95 shadow-2xl relative ${
//               isRecording 
//                 ? 'bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600' 
//                 : 'bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600'
//             }`}
//             style={{
//               boxShadow: isRecording 
//                 ? '0 20px 40px rgba(239, 68, 68, 0.4)' 
//                 : '0 20px 40px rgba(59, 130, 246, 0.4)'
//             }}
//           >
//             {isRecording ? <PauseIcon /> : <PlayIcon />}
       
//             {isRecording && (
//               <>
//                 <div className="absolute inset-0 rounded-full border border-white opacity-30 animate-ping" />
//                 <div className="absolute inset-0 rounded-full border border-white opacity-20 animate-ping" style={{ animationDelay: '0.5s' }} />
//               </>
//             )}
//           </button> */}

//           <AmebaButton 
//             isRecording={isRecording} 
//             startVoiceAssistant={startVoiceAssistant} 
//             stopVoiceAssistant={stopVoiceAssistant} 
//           />

// <div className="mt-4 text-[#15345fff] text-lg sm:text-xl font-medium text-center">
//   {isRecording ? 'Voice Assistant Active' : 'Start Conversation'}
// </div>



         
//           {/* Single Dynamic Status Indicator */}
//           {isRecording && (
//             <div className="mt-4 text-center">
//               <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full transition-all text-sm font-medium ${
//                 isBotSpeaking 
//                   ? 'bg-purple-500 bg-opacity-30 text-purple-200' 
//                   : isProcessing
//                     ? 'bg-yellow-500 bg-opacity-30 text-yellow-200'
//                     : isListening 
//                       ? 'bg-blue-500 bg-opacity-30 text-blue-200'
//                       : 'bg-gray-700 text-gray-300'
//               }`}>
//                 <div className={`w-2 h-2 rounded-full ${
//                   isBotSpeaking 
//                     ? 'bg-purple-400 animate-pulse' 
//                     : isProcessing
//                       ? 'bg-yellow-400 animate-pulse'
//                       : isListening 
//                         ? 'bg-blue-400 animate-pulse'
//                         : 'bg-gray-500'
//                 }`} />
//                 <span>
//                   {isBotSpeaking 
//                     ? `Speaking • Turn ${turnCount}` 
//                     : isProcessing
//                       ? `Processing • Turn ${turnCount}`
//                       : isListening 
//                         ? `Listening • Turn ${turnCount}`
//                         : `Ready • Turn ${turnCount}`}
//                 </span>
//               </div>
//             </div>
//           )}
//         </div>

//         {/* Waveform Visualizer */}
//         {isRecording && (
//           <div className="mb-6">
//             <WaveformVisualizer isActive={isListening || isBotSpeaking} />
//           </div>
//         )}

//         {/* Conversation Display - Responsive */}
//       <div className="backdrop-blur-xl rounded-3xl p-4 sm:p-6 lg:p-8 min-h-64 sm:min-h-80 ">
//   <ConversationDisplay />
// </div>

//         {/* Instructions */}
//         {isRecording && (
//           <div className="mt-6 text-center text-gray-300">
//             <div className="text-base sm:text-lg font-light">Speak naturally • Assistant responds in real-time</div>
//           </div>
//         )}
//       </div>
//     </div>
//   );
// };

// export default ImprovedVoiceAssistant;
